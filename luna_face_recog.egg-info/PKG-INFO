Metadata-Version: 2.4
Name: luna-face-recog
Version: 1.0.0
Summary: A modern GPU-accelerated face recognition toolkit (ArcFace + InsightFace)
Home-page: https://github.com/LSDJesus/Luna_face_recog
Author: Luna Face Recognition Team
Author-email: 
License: MIT
Project-URL: Homepage, https://github.com/LSDJesus/Luna_face_recog
Project-URL: Issues, https://github.com/LSDJesus/Luna_face_recog/issues
Keywords: face-recognition,computer-vision,pytorch,insightface,arcface
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.9.0
Requires-Dist: torchvision>=0.10.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: opencv-python>=4.5.0
Requires-Dist: Pillow>=8.0.0
Requires-Dist: tqdm>=4.62.0
Requires-Dist: insightface>=0.7.3
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: types-Pillow; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: twine; extra == "dev"
Provides-Extra: bench
Requires-Dist: pyinstrument; extra == "bench"
Requires-Dist: rich; extra == "bench"
Requires-Dist: pandas>=1.3.0; extra == "bench"
Requires-Dist: scikit-learn>=1.0.0; extra == "bench"
Requires-Dist: matplotlib>=3.5.0; extra == "bench"
Provides-Extra: api
Requires-Dist: fastapi>=0.110.0; extra == "api"
Requires-Dist: uvicorn>=0.23.0; extra == "api"
Provides-Extra: analysis
Requires-Dist: pandas>=1.3.0; extra == "analysis"
Requires-Dist: scikit-learn>=1.0.0; extra == "analysis"
Requires-Dist: matplotlib>=3.5.0; extra == "analysis"
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Luna Face Recognition (luna_face_recog)

Modern, GPU‑accelerated face recognition + analysis toolkit built around:

* Embeddings: ArcFace‑style backbone (PyTorch) with L2‑normalized 512‑d vectors
* Detection: InsightFace (ONNXRuntime) with CUDA → CPU graceful fallback
* Optional (experimental) legacy demographic heads (age / gender / race)
* Utility scripts for benchmarking, clustering, calibration & evaluation

> Status: Core recognition pipeline stable. Legacy demographic heads retained but currently not reliable (age collapse, gender near random). Clustering utilities provided for exploratory identity grouping. Future improvement work is outlined in the Roadmap.

---

## Contents
1. Key Capabilities
2. Installation & Environment
3. Quick Start (Embeddings, Verification, Search)
4. API Reference (Python Class Methods)
5. Command Line / Scripts
6. Clustering & Analysis Workflow
7. Demography (Current Limitations)
8. Configuration & Extensibility
9. CLI Usage
10. FastAPI Service
11. Packaging & Distribution (pyproject / build / publish)
12. Project Structure
13. Development (Formatting, Tests, Type Checking)
14. Roadmap
15. License

---

## 1. Key Capabilities
* Fast GPU face detection using InsightFace model packs (default `buffalo_l`) with automatic CPU fallback. Alternate pack `antelopev2` supported.
* ArcFace‑style embedding model (512‑d) for verification, search, clustering.
* Multi‑face handling (scripts support largest face or area threshold rules).
* Benchmarking utilities for throughput measurement (single / multi worker).
* Clustering experiments (complete‑link hierarchical + DBSCAN‑like sweep).
* Reproducible calibration scripts for (experimental) demography heads.

---

## 2. Installation & Environment

### Minimal Install
```bash
git clone https://github.com/LSDJesus/Luna_face_recog.git
cd Luna_face_recog
python -m venv .venv
source .venv/bin/activate  # (Linux/macOS)
# OR on Windows PowerShell:
. .venv/Scripts/Activate.ps1

pip install --upgrade pip
pip install -e .
```

### Development Extras
```bash
pip install -e .[dev]
```

### GPU Notes (Windows)
Install the appropriate PyTorch build with CUDA for your GPU. Example (adjust versions):
```bash
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121
```
InsightFace will attempt CUDA first; if it fails it logs a warning and proceeds on CPU.

---

## 3. Quick Start

### Create Embeddings & Verify (Detector Pack Selection)
```python
from luna_face_recog import luna_face
from luna_face_recog.luna_face import LunaFace

lf = LunaFace(model_name="arcface", device="auto", detector_pack="buffalo_l")  # or antelopev2

res = lf.verify("img/person_a_1.jpg", "img/person_a_2.jpg")
print(res)  # {verified, distance, similarity, threshold, model}

embedding = lf.represent("img/person_a_1.jpg")
print(embedding.shape)  # (512,)
```

### Search a Folder
```python
matches = lf.find("query.jpg", "gallery/")
for m in matches[:5]:
    print(m['identity'], m['similarity'])
```

### Face Detection & Crops
```python
detections = lf.detect("group_photo.jpg")
faces = lf.extract_faces("group_photo.jpg")
print(len(detections), len(faces))
```

---

## 4. API Reference (Core Class `LunaFace`)

Method | Description | Returns
-------|-------------|--------
`verify(img1, img2, model_name=None)` | Compare two faces; threshold internally chosen | dict (verified, distance, similarity, threshold, model)
`represent(img, model_name=None)` | Produce 512‑d embedding | np.ndarray
`find(query_img, db_path, model_name=None)` | Rank database images by similarity | list[dict]
`detect(img)` | Detect faces (bbox, landmarks, age*, gender* if available; depends on InsightFace pack) | list[dict]
`extract_faces(img)` | Return cropped faces | list[np.ndarray]
`analyze(img)` | (Experimental) legacy facial attribute analysis | dict

\* Age / gender only where InsightFace model yields them (or legacy heads if integrated separately in scripts).

---

## 5. Command Line / Scripts

Utility scripts (subject to change):

Script | Purpose
-------|--------
`scripts/benchmark_insightface.py` | Throughput benchmarking (Tammy subset + full set) with modes (off|legacy|hybrid)
`scripts/cluster_analysis.py` | Threshold sweeps (complete‑link + DBSCAN‑like) summarizing cluster counts
`scripts/cluster_group_report.py` | Lists clusters at a given threshold + purity metrics
`scripts/evaluate_recognition.py` | Intra‑class stats & simple clustering check
`scripts/calibrate_demography.py` | Small labeled set calibration (age linear fit + gender medians)
`scripts/evaluate_demography.py` | Gender temperature sweep (legacy heads)

Example cluster report run:
```bash
python scripts/cluster_group_report.py --device cuda --threshold 0.45 --prefix-match --metrics
```

---

## 9. CLI Usage

An install provides the `luna-face` command.

Examples:
```bash
luna-face verify img/a.jpg img/b.jpg
luna-face represent img/a.jpg
luna-face detect img/a.jpg
luna-face find img/a.jpg gallery/ --limit 5
```
Flags:
* `--model arcface|facenet|vggface` (default arcface)
* `--device auto|cpu|cuda`
* `--pack buffalo_l|antelopev2` (InsightFace detector + age/gender pack)
* `--pack-root <dir>` optional custom model cache root

Use `luna-face -h` for global help and `luna-face verify -h` for subcommand help.

---

## 10. FastAPI Service

Install API extras:
```bash
pip install .[api]
```

Run server:
```bash
uvicorn luna_face_recog.api_server:app --host 0.0.0.0 --port 8000
```

Endpoints:
* `GET /health`
* `POST /verify` {img1, img2}
* `POST /represent` {img}
* `POST /detect` {img, pack?}

Payload images: base64 encoded JPEG/PNG bytes.
Example (Python):
```python
import base64, requests
img_b64 = base64.b64encode(open('img/a.jpg','rb').read()).decode()
r = requests.post('http://localhost:8000/represent', json={'img': img_b64})
print(r.json())
```

---

## 6. Clustering & Analysis Workflow
1. Generate embeddings for all images (scripts already handle via internal model calls).
2. Run `cluster_analysis.py` to inspect how cluster counts change with distance thresholds.
3. Choose a threshold balancing over‑merge vs fragmentation (e.g. start around 0.42–0.48 from empirical distributions).
4. Use `cluster_group_report.py` to inspect concrete groupings; iterate threshold.
5. (Optional) Implement or extend silhouette / Dunn scoring to auto‑suggest threshold (future roadmap item).

Distance Metric: Code uses cosine‑derived L2 (after normalization). Lower distance ⇒ more similar.

---

## 7. Demography (Current Limitations & Pack Comparison)
Legacy age/gender/race heads were reattached but empirical evaluation showed:
* Age predictions collapsed (linear calibration unstable: extreme coefficients).
* Gender probabilities near 0.5 regardless of temperature scaling (≈45% accuracy on small test).
For production use, prefer: (a) external dedicated demographic model, or (b) train new lightweight heads on embeddings.

### InsightFace Pack Choice (buffalo_l vs antelopev2)
The toolkit now allows switching detector/age-gender model packs:

| Pack | Components | Notes |
|------|------------|-------|
| buffalo_l | SCRFD detector + ArcFace rec + genderage.onnx | Original default; stable, conservative ages |
| antelopev2 | Updated detector + recognition + genderage.onnx | Sometimes different age bias; similar gender reliability |

Switch in Python:
```python
lf = LunaFace(detector_pack="antelopev2")
```
CLI:
```bash
luna-face --pack antelopev2 detect img.jpg
```
FastAPI JSON payloads may include "pack":"antelopev2".

### Pack Comparison Script
Use `scripts/compare_packs.py` to gather summary metrics (detection rate, age mean/std, gender distribution, cross-pack agreement):
```bash
python scripts/compare_packs.py --images tests/dataset --packs buffalo_l antelopev2 --device auto --per-image --output pack_compare.json
```
Output JSON includes per-pack summaries and (for two packs) overlap stats (gender agreement rate, mean absolute age diff). This helps determine if inconsistencies are due to model pack differences vs. integration issues.

---

## 8. Configuration & Extensibility
Extension points:
* New backbone: implement a class mirroring `FaceRecognitionModel` API (input_shape, get_embedding(s), get_threshold).
* Alternative detector: create a detector exposing `detect_faces(img)` and optional `extract_faces`.
* New clustering strategies: add scripts under `scripts/`—they can directly import and batch embeddings.
* Threshold selection: integrate statistical score computation (silhouette, Calinski-Harabasz) over candidate thresholds.

---

## 11. Packaging & Distribution

This repository includes both `setup.py` and a modern `pyproject.toml`.

### Editable Install (development)
```bash
pip install -e .[dev]
```

### Build Wheel & Source Distribution
```bash
python -m build  # if build is installed; else: pip install build
```
Artifacts land in `dist/` (e.g. `luna_face_recog-1.0.0-py3-none-any.whl`).

### Publish to PyPI (example)
```bash
pip install twine
twine upload dist/*
```
(Configure an API token first; see PyPI docs.)

### Import After Installation
```python
from luna_face_recog.luna_face import LunaFace
```

---

## 12. Project Structure (Simplified)
```
luna_face_recog/
  luna_face.py                # Main public interface
  detection/face_detector.py  # InsightFace wrapper + fallback
  models/                     # Embedding + (legacy) analysis models (ArcFace & stubs)
  commons/                    # Logger, image utilities
scripts/                      # Benchmark, clustering, calibration, evaluation scripts
tests/                        # Test images + evaluation scripts (not formal pytest unit tests yet)
pyproject.toml                # Build / metadata
setup.py                      # Legacy build entry
```

---

## 13. Development

Formatting / Linting:
```bash
black .
isort .
```

Static Types (selective):
```bash
mypy luna_face_recog
```

Run any script:
```bash
python scripts/cluster_group_report.py --help
```

Tests: Currently integration-style scripts; future unit tests can target core modules (detector, embedding, verification threshold logic).

---

## 14. Roadmap
| Area | Planned Improvements |
|------|----------------------|
| Clustering | Add silhouette/Dunn scoring & recursive split of mixed clusters |
| Demography | Replace legacy heads with new lightweight classifier trained on curated set |
| Demography Packs | Empirically benchmark buffalo_l vs antelopev2 (detection quality, age/gender stability) |
| Thresholding | Data-driven adaptive verification threshold per quality bucket |
| Packaging | Provide optional minimal extra without heavy plotting deps |
| API | REST microservice wrapper (FastAPI) w/ batching & async | 
| Testing | Formal pytest suite + synthetic generation harness |

---

## 15. License
MIT License. See `LICENSE` file.

---

## Citation
If this toolkit aids your research or product, please cite (draft example):
```text
@software{luna_face_recog,
  title = {Luna Face Recognition Toolkit},
  author = {Luna Face Recognition Team},
  year = {2025},
  url = {https://github.com/LSDJesus/Luna_face_recog}
}
```

---

## Support / Questions
Open a GitHub issue with reproduction steps and environment details (OS, Python, CUDA, torch, insightface versions).
